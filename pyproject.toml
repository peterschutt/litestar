[tool.poetry]
name = "starlite"
version = "1.4.2"
description = "Light-weight and flexible ASGI API Framework"
authors = ["Na'aman Hirschfeld <nhirschfeld@gmail.com>"]
maintainers = ["Na'aman Hirschfeld <nhirschfeld@gmail.com>", "Peter Schutt <peter.github@proton.me>"]
license = "MIT"
readme = "README.md"
homepage = "https://github.com/starlite-api/starlite"
repository = "https://github.com/starlite-api/starlite"
documentation = "https://starlite-api.github.io/starlite"
keywords = ["api", "rest", "http", "asgi", "pydantic", "starlette", "fastapi", "framework"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Environment :: Web Environment",
    "License :: OSI Approved :: MIT License",
    "Natural Language :: English",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3.7",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python",
    "Topic :: Internet :: WWW/HTTP",
    "Topic :: Software Development :: Libraries",
    "Topic :: Software Development",
    "Typing :: Typed",
]
include = ["CHANGELOG.md"]
packages = [
    { include = "starlite" },
]

[tool.poetry.dependencies]
python = ">=3.7,<4.0"
openapi-schema-pydantic = "*"
orjson = "*"
pydantic = "*"
pydantic-factories = "*"
python-multipart = "*"
pyyaml = "*"
starlette = "*"
typing-extensions = "*"

Jinja2 = { version = "*", optional = true }
Mako = { version = "*", optional = true }
freezegun = { version = "*", optional = true }
hypothesis = { extras = ["cli"], version = "*", optional = true }
mkdocs-material = { version = "^8.2.0", optional = true }
pre-commit = { version = "*", optional = true }
pytest = { version = "*", optional = true }
pytest-asyncio = { version = "*", optional = true }
pytest-cov = { version = "*", optional = true }
pytest-mock = { version = "*", optional = true }
requests = { version = "*", optional = true }
sqlalchemy = { extras = ["mypy"], version = "*", optional = true }
tox = { version = "*", optional = true }
uvicorn = { version = "*", optional = true }

[tool.poetry.extras]
test = [
    "Jinja2",
    "Mako",
    "freezegun",
    "hypothesis",
    "pytest",
    "pytest-asyncio",
    "pytest-cov",
    "pytest-mock",
    "requests",
    "sqlalchemy",
    "uvicorn",
]
testing = ["requests"]
lint = ["pre-commit"]
docs = ["mkdocs-material"]
dev = ["tox"]

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 120
include = '\.pyi?$'

[tool.isort]
profile = "black"
multi_line_output = 3

[tool.pylint.MESSAGE_CONTROL]
disable = [
    "fixme",
    "invalid-name",
    "line-too-long",
    "missing-class-docstring",
    "missing-module-docstring",
    "super-init-not-called",
    "too-few-public-methods",
    "duplicate-code",
]
enable = "useless-suppression"

[tool.pylint.REPORTS]
reports = "no"

[tool.pylint.FORMAT]
max-line-length = "120"

[tool.pylint.DESIGN]
max-args = 15
max-attributes = 15
max-locals = 30
max-returns = 15
max-branches = 15

[tool.pylint.VARIABLES]
ignored-argument-names = "args|kwargs|_|__"

[tool.pylint.BASIC]
good-names = "_,i,e,fn"

[tool.coverage.run]
branch = true
data_file = "./.coverage"
omit = ["*/tests/*"]
source = ["starlite"]

[tool.coverage.paths]
source = [
    "../starlite",
    "*/site-packages/starlite"
]

[tool.coverage.report]
fail_under = 97

[tool.coverage.xml]
output = "./coverage.xml"

[tool.pytest.ini_options]
asyncio_mode = "auto"
